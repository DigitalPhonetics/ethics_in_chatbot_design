# general rules

rule hello(): "(\\b|^|\\ )(hi|hello|howdy|hey)\\b"
rule bye(): "(\\b|^|\\ )(bye(-)?(bye)?|good(-)?bye|that'?s?\\ (is\\ )*all)(\\s|$|\\ |\\.)"
rule deny(): "((\\b|^|\\ )(n(o)?|wrong|incorrect|error|nope)|(not\\ (true|correct|right)))(\\s)?$"
rule affirm(): "((yes|yeah|(\\b|^)ok\\b|(\\b|^)OK|okay|sure|^y$|(\\b|^)yep(\\b|$)|(that('?s| is) )?(?<!not\\ )(?<!no\\ )(right|correct|confirm)))(\\s)?$"
rule thanks(): "(?=.*(^(\\ )*)(((great|good|awesome|nice|cool)\\ )?((that((')?s|\\ (is|was))\\ (very\\ )?helpful)\\ )?(thank|thank(s|\\ you)(\\ (very|so)\\ much)?)(\\ (that((')?s|\\ (is|was))\\ (very\\ )?helpful))?|((great|good|awesome|nice|cool)\\ )?(that((')?s|\\ (is|was))\\ (very\\ )?helpful)|(great|good|awesome|nice|cool))((\\ )*))(?=^(?:(?!bye).)*$).*$"
rule repeat(): "(\\b|^|\\ )(repeat((\\ that )|(\\ it))?)|(say((\\ that )|(\\ it))\\ again)|(again)"
rule reqalts(): "(\\b|^|\\ )((something|anything)\\ else)|(different(\\ one)*)|(another\\ one)|(alternatives*)|(other options*)|((don'*t|do not) (want|like)\\ (that|this)(\\ one)*)"
rule ack(): "{IMPOSSIBLEREGEX()}"
rule bad(): "{IMPOSSIBLEREGEX()}"

# user informable slots are name, department and position

rule inform(name)
    "{rINFORM()} {synonyms("name", name)}"
    "{synonyms("name", name)}{WBG()}"
    "(\\ |^){synonyms("name", name)}(\\ (please|and))*"

# All slots are requestable


rule request(registration)
    ".*{slot_synonyms("registration")}"

rule request(registration_period_sose)
    ".*{slot_synonyms("registration_period_sose")}"

rule request(registration_period_wise)
    ".*{slot_synonyms("registration_period_wise")}"

rule request(acceptance_belated_registration)
    ".*{slot_synonyms("acceptance_belated_registration")}"

rule request(registration_withdrawal)
    "^(?!.*(ill|sick)).*{slot_synonyms("registration_withdrawal")}"

rule request(acceptance_missed_withdrawal)
    ".*{slot_synonyms("acceptance_missed_withdrawal")}"

rule request(acceptance_illness_withdrawal)
    ".*{slot_synonyms("acceptance_illness_withdrawal")}"

rule request(contact_registration_problem)
    "Who can I {slot_synonyms("contact_registration_problem")}"


# synonyms

function synonyms(slot, value)
    "{value}"

    add_if slot = "name"
        if value = "bachelor thesis"
            "bachelor arbeit"
            "bachelors thesis"
        if value = "master thesis"
            "masterarbeit"
            "masters thesis"
            "thesis for my masters"
            "master's thesis"
            "thesis"
        if value = "repeat exam"
            "repeated exam"
        if value = "requirements module"
            "required module"
            "requirement module"

function slot_synonyms(slot)
    "{IMPOSSIBLEREGEX()}"

    if slot = "registration"
        "^(?!.*late)(?<!de)(?<!missed to )register(ing)?"
        "(want|how|have|need|do) to register"
        "how (do|can)? i register"
        "(i |one )register"
        "(?<!missed )(?<!late )(?<!belated )(?<!semester )(?<!sose )(?<!wise )registration(?! period)(?! deadline)"
        "sign(ing)? up"

    if slot = "registration_period_sose"
        "(the )?summer semester registration period"
        "(the )?registration period for summer semester"
        "sose registration period"
        "sose registration"
        "summer semester registration"

    if slot = "registration_period_wise"
        "(the )?winter semester registration period"
        "(the )?registration period for (the )?winter semester"
        "wise registration period"
        "wise registration"
        "winter registration"
        "winter semester registration"

    if slot = "acceptance_belated_registration"
        "late registration"
        "missed (the )?registration period"
        "register late"
        "missed (the deadline )?(to )?(sign up|register|enroll|enrolling)?"

    if slot = "registration_withdrawal"
        "(deregister|drop|withdraw|change)"

    if slot = "acceptance_missed_withdrawal"
        "missed (the)? (withdrawal |deregistration) period"

    if slot = "acceptance_illness_withdrawal"
        "sick"
        " ill "
        " ill(\\?|,|\\.|\\!)"
        "illness"
        "unwell"
    
    if slot = "contact_registration_problem"
        "contact (if I have|for) a registration problem"


# constants

function domain_vocab(): "(lecturer|teacher)"
function IMPOSSIBLEREGEX(): "^\b$"
function WHAT(): "(what(\\')?(s)?|which|does|where)(\\ (its|the))*"
function HOW(): "(how do (you|i) )|(is it possible to)|(can (i|you) (tell me how (to |i can )?)?)|(i don(')?t know how (to |i can )?)|(can you help me (to )?)"
function WHEN(): "(when (does |is ) )|(during which time)"
function IT(): "(it\\'*s*|it\\ have|is\\ it\\'*s*|is\\ (the|their))(\\ for)*"
function CYTM(): "(can\\ you\\ tell\\ me\\ (the|it\\'*s|their))"
function CIG(): "(can\\ I\\ get\\ (the|it\\'*s|their))"
function NEGATE(): "((i\\ )*(don\\'?t|do\\ not|does\\ not|does\\'?nt)\\ (care|mind|matter)(\\ (about|what))*(\\ (the|it\\'?s*))*)"
# Cant create variable lengths with negative lookback... else merge following:
function DONTCARE(): "(i\\ dont\\ care)"
function DONTCAREWHAT(): "(i\\ dont\\ care\\ what\\ )"
function DONTCAREABOUT(): "(i\\ dont\\ care\\ about\\ )"
function rREQUEST(): "(\\\\b|^|\\ )(?<!{DONTCARE()})({WHAT()}\\ {IT()}|{HOW()}|{WHEN()}|{CYTM()}|{CIG()})"
function WANT(): "(what\\ about|want|have|need|looking\\ for|used\\ for)(\\ a(n)?)*"
function WBG(): "(\\ ((would|seems\\ to)\\ be\\ (good|nice)($|[^\\?]$)|seems\\ (good|nice)($|[^\\?]$)))"
function rINFORM(): "(\\\\b|^|\\ ){WANT()}"
function rINFORM_DONTCARE(): "{DONTCARE()} ((what|which|about)(\\ (it\\'*s*|the))*)+"
function rINFORM_DONTWANT(): "(((i\\ )*(don\\'*t\\ want))|it\\ (shouldn\\'*t|should\\ not)\\ (have|be))+"
# Contextual dontcares: i.e things that should be labelled inform(=dontcare)
function rCONTEXTUAL_DONTCARE(): "(anything(?!\\ else)|((any$|any\\ kind)|(i\\ )*(don\\'?t|do\\ not)\\ (care|know))($|(?!\\ (a?bout|of|what))|(\\ (a?bout|of|what)\\ (type|kind)(?!\\ of))|\\ a?bout\\ (that|this))|(any(thing)?\\ (is\\ )*(fine|ok\\\\b|okay|will\\ do))($|\\ and|\\ but)|(it )?(doesn\\'?t|does not) matter)+"
